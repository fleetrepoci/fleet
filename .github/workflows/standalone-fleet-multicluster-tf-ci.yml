name: E2E Standalone Multi-Cluster Fleet

on:
  schedule:
    - cron:  '0 5 30 * *'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled'
        required: false
        default: "false"
  pull_request:
    paths-ignore:
    - 'docs/**'
    - 'charts/**'
    - 'scripts/**'
    - '*.md'

env:
  GOARCH: amd64
  CGO_ENABLED: 0
  SETUP_GO_VERSION: '^1.18'

jobs:
  e2e-fleet-mc-test:
    runs-on: ubuntu-latest

    steps:
      -
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        uses: actions/checkout@v3
        with:
          repo: https://github.com/moio/fleetaform
          path: terraform
          fetch-depth: 0
      -
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.SETUP_GO_VERSION }}
      -
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      -
        uses: actions/cache@v3
        with:
          path: |
            e2e/assets/terraform/.terraform/modules
            e2e/assets/terraform/.terraform/providers
          key: ${{ runner.os }}-tf-${{ hashFiles('e2e/assets/terraform/.terraform.lock.hcl') }}
      -
        name: Install Ginkgo CLI
        run: go install github.com/onsi/ginkgo/v2/ginkgo@v2.1
      -
        name: Build fleet binaries
        run: |
          go build -o bin/fleetcontroller-linux-$GOARCH ./cmd/fleetcontroller

          go build -o "bin/fleet-linux-$GOARCH"
          go build -o "bin/fleetagent-linux-$GOARCH" ./cmd/fleetagent
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Get uuid
        id: uuid
        run: echo "::set-output name=uuid::$(uuidgen)"
      -
        name: Docker meta - fleet
        id: meta-fleet
        uses: docker/metadata-action@v4
        with:
          images: |
            ttl.sh/rancher/fleet-${{ steps.uuid.outputs.uuid }}
          tags: type=raw,value=1h
      -
        name: Build and push - fleet
        uses: docker/build-push-action@v3
        with:
          context: .
          file: package/Dockerfile
          build-args: |
            ARCH=${{ env.GOARCH }}
          push: true
          tags: ${{ steps.meta-fleet.outputs.tags }}
          labels: ${{ steps.meta-fleet.outputs.labels }}
      -
        name: Docker meta - fleetagent
        id: meta-fleet-agent
        uses: docker/metadata-action@v4
        with:
          images: |
            ttl.sh/rancher/fleet-agent-${{ steps.uuid.outputs.uuid }}
          tags: type=raw,value=1h
      -
        name: Build and push - fleetagent
        uses: docker/build-push-action@v3
        with:
          context: .
          file: package/Dockerfile.agent
          build-args: |
            ARCH=${{ env.GOARCH }}
          push: true
          tags: ${{ steps.meta-fleet-agent.outputs.tags }}
          labels: ${{ steps.meta-fleet-agent.outputs.labels }}
      -
        name: Set up tmate debug session
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15
        with:
          limit-access-to-actor: true
      - name: TF Deploy standalone fleet
        env:
          TF_VAR_fleet_crd_chart: "../fleet/charts/fleet-crd"
          TF_VAR_fleet_chart: "../fleet/charts/fleet"
          TF_VAR_fleet_agent_chart: "../fleet/charts/fleet-agent"
          TF_VAR_fleet_api_url: "172.18.0.1.omg.howdoi.website"
          TF_VAR_fleet_context: "k3d-upstream"
          TF_VAR_fleet_downstream_context: "k3d-downstream"
        run: |
          kubectl config use-context k3d-upstream

          cd terraform
          # TODO image name in helm chart?
          # TODO chart from local folder
          # TODO edit main.tf
          terraform init
          terraform apply -auto-approve

      -
        name: Label downstream cluster
        run: |
          { grep -q -m 1 -e "k3d-downstream"; kill $!; } < <(kubectl get clusters.fleet.cattle.io -n fleet-local -w)
          name=$(kubectl get clusters.fleet.cattle.io -o=jsonpath='{.items[0].metadata.name}' -n fleet-local)
          kubectl patch clusters.fleet.cattle.io -n fleet-local "$name" --type=json -p '[{"op": "add", "path": "/metadata/labels/env", "value": "test" }]'
      -
        name: E2E tests for examples
        env:
          FLEET_E2E_NS: fleet-local
          FLEET_E2E_CLUSTER: k3d-upstream
          FLEET_E2E_CLUSTER_DOWNSTREAM: k3d-downstream
        run: |
          kubectl config use-context k3d-upstream
          ginkgo e2e/multi-cluster
      # -
      #   name: Tmate session for failed runs
      #   if: ${{ failure() }}
      #   uses: mxschmitt/action-tmate@v3
      #   timeout-minutes: 15
      #   with:
      #     limit-access-to-actor: true
      -
        name: Dump failed environment
        if: failure()
        run: |
          mkdir -p tmp
          kubectl config use-context k3d-upstream
          kubectl get -A pod,secret,service,ingress -o json > tmp/cluster.json
          kubectl get -A events > tmp/events.log
          helm list -A > tmp/helm.log
          kubectl logs -n fleet-system -l app=fleet-controller > tmp/fleetcontroller.log
          kubectl logs -n fleet-system -l app=fleet-agent > tmp/fleetagent.log

          kubectl config use-context k3d-downstream
          kubectl get -A pod,secret,service,ingress -o json > tmp/cluster-downstream.json
          kubectl get -A events > tmp/events-downstream.log
          helm list -A > tmp/helm-downstream.log
          kubectl logs -n fleet-system -l app=fleet-agent > tmp/fleetagent-downstream.log

          docker logs k3d-upstream-server-0 &> tmp/k3s.log
          docker exec k3d-upstream-server-0 sh -c 'cd /var/log/containers; grep -r "." .' > tmp/containers.log

          docker logs k3d-downstream-server-0 &> tmp/k3s-downstream.log
          docker exec k3d-downstream-server-0 sh -c 'cd /var/log/containers; grep -r "." .' > tmp/containers-downstream.log
      -
        name: Upload Logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: gha-fleet-e2e-standalone-logs-${{ github.sha }}-${{ github.run_id }}
          path: |
            tmp/*.json
            tmp/*.log
          retention-days: 2
